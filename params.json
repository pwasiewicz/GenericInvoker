{"name":"GenericInvoker","tagline":"Small library that allows you to invoke the specified action when object is of particular type.","body":"GenericInvoker\r\n==============\r\n\r\nGenericInvoker is small PortableClassLibrary that allows you to invoke the specified action when object is of particular type.\r\n\r\nAvailable via [nuget](https://www.nuget.org/packages/GenericInvoker/).\r\n\r\nBackground\r\n==============\r\n\r\nThere are some question on [Stackoverflow](http://stackoverflow.com), where authors ask how to handle case, when we have object and take specified steps only when the object is of concrete, hardcoded type. There are some solutions proposed:\r\n\r\n```c#\r\nobject obj = GetObject();\r\nif (obj is MyClass)\r\n{\r\n  var casted = obj as MyClass;\r\n  // actions\r\n}\r\n\r\nif (obj is OtherClass)\r\n{\r\n  var casted = obj as OtherClass;\r\n  // actions\r\n}\r\n\r\n// and so on\r\n```\r\n\r\nor:\r\n```c#\r\nvoid MyAction(MyClass class)\r\n{\r\n}\r\n\r\nvoid MyAction(OtherClass)\r\n{\r\n}\r\n\r\nobject obj = GetObject();\r\nMyAction((dynamic)obj);\r\n```\r\n\r\n**GenericInvoker** combines both solution with Fluent API:\r\n\r\n```c#\r\nusing GenericInvoker;\r\n\r\n//...\r\n\r\nobject obj = GetObject();\r\nobj.DetermineType().When((MyClass target) => { /* action */ })\r\n                   .When((OtherClass target) => { /* action */ })\r\n                   .Resolve();\r\n```                   \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}